CREATE OR REPLACE PROCEDURE LENDINGAI_DB.BASE.SP_LOANRECOMMENDATION_TRANSFORMATIONS ()
RETURNS VARCHAR(16777216)
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('snowflake-snowpark-python','mlxtend')
HANDLER = 'main'
EXECUTE AS OWNER
AS
$$

import pandas as pd
import pickle
import snowflake.snowpark as snowpark
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules

def main(session: snowpark.Session): 

    #Retrieve data from a Snowflake table (APPROVEDLOANAPPLICATIONS) and convert it to a Pandas DataFrame.
    tbl=session.table('LENDINGAI_DB.RAW.APPROVEDLOANAPPLICATIONS').to_pandas()
    df=pd.DataFrame(tbl)

    #Define a list of columns to consider in the analysis.
    list_of_columns_to_consider=['EMP_TITLE', 'TITLE', 'ID','LOAN_AMNT']

    #Create a modified DataFrame containing only the selected columns.
    modified_df = df[list_of_columns_to_consider]
        
    #Step 1:Select EMP_TITLE, TITLE, ID, LOAN_AMNT from the modified DataFrame.
    select_column = modified_df[['EMP_TITLE', 'TITLE','ID','LOAN_AMNT']]
    
    #Step 2:Filter records with tag 'Other' and filter any missing value records for both EMP_TITLE and TITLE.
    filtered_df = select_column[(select_column['EMP_TITLE'] != 'Other') &(select_column['EMP_TITLE'].notna()) & (select_column['TITLE'] != 'Other') & (select_column['TITLE'].notna())]
    
    # Step 3:Remove duplicates from the filtered DataFrame.
    filtered_data = filtered_df.drop_duplicates()
    
    # Step 4: Filter records with EMP_TITLE count greater than or equal to 1 and give each EMP_TITLE a unique ID.
    filtered_data=filtered_data.groupby('EMP_TITLE').filter(lambda x: len(x) >= 1)
    filtered_data["id"] = filtered_data.groupby('EMP_TITLE').ngroup() + 1

    #Save the filtered data as a new table in Snowflake (TBL_FILTERED_DATA).
    session.createDataFrame(filtered_data).write.mode("overwrite").save_as_table('LENDINGAI_DB.BASE.TBL_FILTERED_DATA')
    
    #Step 5: Perform dummy encoding and prepare a matrix with 0,1 values.
    df = pd.DataFrame(filtered_data)
    pivot_df = df.pivot_table(index='EMP_TITLE', columns='TITLE', values='ID', aggfunc=lambda x: 1)
    pivot_df = pivot_df.fillna(0)
    
    #Save the transformed data as a new table in Snowflake (TBL_LOANRECOMMENDATION_TRANSFORMED).                             
    session.createDataFrame(pivot_df).write.mode('overwrite').save_as_table('LENDINGAI_DB.BASE.TBL_LOANRECOMMENDATION_TRANSFORMED')
    #Return a message indicating that the procedure has completed.
    return 'done'

$$;
